// Code generated by ent, DO NOT EDIT.

package opinions

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the opinions type in the database.
	Label = "opinions"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTelephone holds the string denoting the telephone field in the database.
	FieldTelephone = "telephone"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldResturtant holds the string denoting the resturtant field in the database.
	FieldResturtant = "resturtant"
	// FieldOutlook1 holds the string denoting the outlook1 field in the database.
	FieldOutlook1 = "outlook1"
	// FieldOutlook2 holds the string denoting the outlook2 field in the database.
	FieldOutlook2 = "outlook2"
	// FieldOutlook3 holds the string denoting the outlook3 field in the database.
	FieldOutlook3 = "outlook3"
	// FieldWaiting1 holds the string denoting the waiting1 field in the database.
	FieldWaiting1 = "waiting1"
	// FieldWaiting2 holds the string denoting the waiting2 field in the database.
	FieldWaiting2 = "waiting2"
	// FieldOrdering1 holds the string denoting the ordering1 field in the database.
	FieldOrdering1 = "ordering1"
	// FieldOrdering2 holds the string denoting the ordering2 field in the database.
	FieldOrdering2 = "ordering2"
	// FieldOrdering3 holds the string denoting the ordering3 field in the database.
	FieldOrdering3 = "ordering3"
	// FieldService1 holds the string denoting the service1 field in the database.
	FieldService1 = "service1"
	// FieldService2 holds the string denoting the service2 field in the database.
	FieldService2 = "service2"
	// FieldService3 holds the string denoting the service3 field in the database.
	FieldService3 = "service3"
	// FieldQunility1 holds the string denoting the qunility1 field in the database.
	FieldQunility1 = "qunility1"
	// FieldQunility2 holds the string denoting the qunility2 field in the database.
	FieldQunility2 = "qunility2"
	// FieldQunility3 holds the string denoting the qunility3 field in the database.
	FieldQunility3 = "qunility3"
	// FieldValue1 holds the string denoting the value1 field in the database.
	FieldValue1 = "value1"
	// FieldValue2 holds the string denoting the value2 field in the database.
	FieldValue2 = "value2"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldCreatedat holds the string denoting the createdat field in the database.
	FieldCreatedat = "createdat"
	// Table holds the table name of the opinions in the database.
	Table = "opinions"
)

// Columns holds all SQL columns for opinions fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTelephone,
	FieldTime,
	FieldBrand,
	FieldResturtant,
	FieldOutlook1,
	FieldOutlook2,
	FieldOutlook3,
	FieldWaiting1,
	FieldWaiting2,
	FieldOrdering1,
	FieldOrdering2,
	FieldOrdering3,
	FieldService1,
	FieldService2,
	FieldService3,
	FieldQunility1,
	FieldQunility2,
	FieldQunility3,
	FieldValue1,
	FieldValue2,
	FieldComment,
	FieldRating,
	FieldCreatedat,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Opinions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTelephone orders the results by the telephone field.
func ByTelephone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelephone, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByResturtant orders the results by the resturtant field.
func ByResturtant(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResturtant, opts...).ToFunc()
}

// ByOutlook1 orders the results by the outlook1 field.
func ByOutlook1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutlook1, opts...).ToFunc()
}

// ByOutlook2 orders the results by the outlook2 field.
func ByOutlook2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutlook2, opts...).ToFunc()
}

// ByOutlook3 orders the results by the outlook3 field.
func ByOutlook3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutlook3, opts...).ToFunc()
}

// ByWaiting1 orders the results by the waiting1 field.
func ByWaiting1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWaiting1, opts...).ToFunc()
}

// ByWaiting2 orders the results by the waiting2 field.
func ByWaiting2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWaiting2, opts...).ToFunc()
}

// ByOrdering1 orders the results by the ordering1 field.
func ByOrdering1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrdering1, opts...).ToFunc()
}

// ByOrdering2 orders the results by the ordering2 field.
func ByOrdering2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrdering2, opts...).ToFunc()
}

// ByOrdering3 orders the results by the ordering3 field.
func ByOrdering3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrdering3, opts...).ToFunc()
}

// ByService1 orders the results by the service1 field.
func ByService1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldService1, opts...).ToFunc()
}

// ByService2 orders the results by the service2 field.
func ByService2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldService2, opts...).ToFunc()
}

// ByService3 orders the results by the service3 field.
func ByService3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldService3, opts...).ToFunc()
}

// ByQunility1 orders the results by the qunility1 field.
func ByQunility1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQunility1, opts...).ToFunc()
}

// ByQunility2 orders the results by the qunility2 field.
func ByQunility2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQunility2, opts...).ToFunc()
}

// ByQunility3 orders the results by the qunility3 field.
func ByQunility3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQunility3, opts...).ToFunc()
}

// ByValue1 orders the results by the value1 field.
func ByValue1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue1, opts...).ToFunc()
}

// ByValue2 orders the results by the value2 field.
func ByValue2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue2, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByCreatedat orders the results by the createdat field.
func ByCreatedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedat, opts...).ToFunc()
}
