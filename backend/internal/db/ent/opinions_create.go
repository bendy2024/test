// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"erm/internal/db/ent/opinions"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OpinionsCreate is the builder for creating a Opinions entity.
type OpinionsCreate struct {
	config
	mutation *OpinionsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (oc *OpinionsCreate) SetName(s string) *OpinionsCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetTelephone sets the "telephone" field.
func (oc *OpinionsCreate) SetTelephone(s string) *OpinionsCreate {
	oc.mutation.SetTelephone(s)
	return oc
}

// SetTime sets the "time" field.
func (oc *OpinionsCreate) SetTime(t time.Time) *OpinionsCreate {
	oc.mutation.SetTime(t)
	return oc
}

// SetBrand sets the "brand" field.
func (oc *OpinionsCreate) SetBrand(s string) *OpinionsCreate {
	oc.mutation.SetBrand(s)
	return oc
}

// SetResturtant sets the "resturtant" field.
func (oc *OpinionsCreate) SetResturtant(s string) *OpinionsCreate {
	oc.mutation.SetResturtant(s)
	return oc
}

// SetOutlook1 sets the "outlook1" field.
func (oc *OpinionsCreate) SetOutlook1(s string) *OpinionsCreate {
	oc.mutation.SetOutlook1(s)
	return oc
}

// SetOutlook2 sets the "outlook2" field.
func (oc *OpinionsCreate) SetOutlook2(s string) *OpinionsCreate {
	oc.mutation.SetOutlook2(s)
	return oc
}

// SetOutlook3 sets the "outlook3" field.
func (oc *OpinionsCreate) SetOutlook3(s string) *OpinionsCreate {
	oc.mutation.SetOutlook3(s)
	return oc
}

// SetWaiting1 sets the "waiting1" field.
func (oc *OpinionsCreate) SetWaiting1(s string) *OpinionsCreate {
	oc.mutation.SetWaiting1(s)
	return oc
}

// SetWaiting2 sets the "waiting2" field.
func (oc *OpinionsCreate) SetWaiting2(s string) *OpinionsCreate {
	oc.mutation.SetWaiting2(s)
	return oc
}

// SetOrdering1 sets the "ordering1" field.
func (oc *OpinionsCreate) SetOrdering1(s string) *OpinionsCreate {
	oc.mutation.SetOrdering1(s)
	return oc
}

// SetOrdering2 sets the "ordering2" field.
func (oc *OpinionsCreate) SetOrdering2(s string) *OpinionsCreate {
	oc.mutation.SetOrdering2(s)
	return oc
}

// SetOrdering3 sets the "ordering3" field.
func (oc *OpinionsCreate) SetOrdering3(s string) *OpinionsCreate {
	oc.mutation.SetOrdering3(s)
	return oc
}

// SetService1 sets the "service1" field.
func (oc *OpinionsCreate) SetService1(s string) *OpinionsCreate {
	oc.mutation.SetService1(s)
	return oc
}

// SetService2 sets the "service2" field.
func (oc *OpinionsCreate) SetService2(s string) *OpinionsCreate {
	oc.mutation.SetService2(s)
	return oc
}

// SetService3 sets the "service3" field.
func (oc *OpinionsCreate) SetService3(s string) *OpinionsCreate {
	oc.mutation.SetService3(s)
	return oc
}

// SetQunility1 sets the "qunility1" field.
func (oc *OpinionsCreate) SetQunility1(s string) *OpinionsCreate {
	oc.mutation.SetQunility1(s)
	return oc
}

// SetQunility2 sets the "qunility2" field.
func (oc *OpinionsCreate) SetQunility2(s string) *OpinionsCreate {
	oc.mutation.SetQunility2(s)
	return oc
}

// SetQunility3 sets the "qunility3" field.
func (oc *OpinionsCreate) SetQunility3(s string) *OpinionsCreate {
	oc.mutation.SetQunility3(s)
	return oc
}

// SetValue1 sets the "value1" field.
func (oc *OpinionsCreate) SetValue1(s string) *OpinionsCreate {
	oc.mutation.SetValue1(s)
	return oc
}

// SetValue2 sets the "value2" field.
func (oc *OpinionsCreate) SetValue2(s string) *OpinionsCreate {
	oc.mutation.SetValue2(s)
	return oc
}

// SetComment sets the "comment" field.
func (oc *OpinionsCreate) SetComment(s string) *OpinionsCreate {
	oc.mutation.SetComment(s)
	return oc
}

// SetRating sets the "rating" field.
func (oc *OpinionsCreate) SetRating(i int) *OpinionsCreate {
	oc.mutation.SetRating(i)
	return oc
}

// SetCreatedat sets the "createdat" field.
func (oc *OpinionsCreate) SetCreatedat(t time.Time) *OpinionsCreate {
	oc.mutation.SetCreatedat(t)
	return oc
}

// SetID sets the "id" field.
func (oc *OpinionsCreate) SetID(s string) *OpinionsCreate {
	oc.mutation.SetID(s)
	return oc
}

// Mutation returns the OpinionsMutation object of the builder.
func (oc *OpinionsCreate) Mutation() *OpinionsMutation {
	return oc.mutation
}

// Save creates the Opinions in the database.
func (oc *OpinionsCreate) Save(ctx context.Context) (*Opinions, error) {
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OpinionsCreate) SaveX(ctx context.Context) *Opinions {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OpinionsCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OpinionsCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OpinionsCreate) check() error {
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Opinions.name"`)}
	}
	if _, ok := oc.mutation.Telephone(); !ok {
		return &ValidationError{Name: "telephone", err: errors.New(`ent: missing required field "Opinions.telephone"`)}
	}
	if _, ok := oc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Opinions.time"`)}
	}
	if _, ok := oc.mutation.Brand(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required field "Opinions.brand"`)}
	}
	if _, ok := oc.mutation.Resturtant(); !ok {
		return &ValidationError{Name: "resturtant", err: errors.New(`ent: missing required field "Opinions.resturtant"`)}
	}
	if _, ok := oc.mutation.Outlook1(); !ok {
		return &ValidationError{Name: "outlook1", err: errors.New(`ent: missing required field "Opinions.outlook1"`)}
	}
	if _, ok := oc.mutation.Outlook2(); !ok {
		return &ValidationError{Name: "outlook2", err: errors.New(`ent: missing required field "Opinions.outlook2"`)}
	}
	if _, ok := oc.mutation.Outlook3(); !ok {
		return &ValidationError{Name: "outlook3", err: errors.New(`ent: missing required field "Opinions.outlook3"`)}
	}
	if _, ok := oc.mutation.Waiting1(); !ok {
		return &ValidationError{Name: "waiting1", err: errors.New(`ent: missing required field "Opinions.waiting1"`)}
	}
	if _, ok := oc.mutation.Waiting2(); !ok {
		return &ValidationError{Name: "waiting2", err: errors.New(`ent: missing required field "Opinions.waiting2"`)}
	}
	if _, ok := oc.mutation.Ordering1(); !ok {
		return &ValidationError{Name: "ordering1", err: errors.New(`ent: missing required field "Opinions.ordering1"`)}
	}
	if _, ok := oc.mutation.Ordering2(); !ok {
		return &ValidationError{Name: "ordering2", err: errors.New(`ent: missing required field "Opinions.ordering2"`)}
	}
	if _, ok := oc.mutation.Ordering3(); !ok {
		return &ValidationError{Name: "ordering3", err: errors.New(`ent: missing required field "Opinions.ordering3"`)}
	}
	if _, ok := oc.mutation.Service1(); !ok {
		return &ValidationError{Name: "service1", err: errors.New(`ent: missing required field "Opinions.service1"`)}
	}
	if _, ok := oc.mutation.Service2(); !ok {
		return &ValidationError{Name: "service2", err: errors.New(`ent: missing required field "Opinions.service2"`)}
	}
	if _, ok := oc.mutation.Service3(); !ok {
		return &ValidationError{Name: "service3", err: errors.New(`ent: missing required field "Opinions.service3"`)}
	}
	if _, ok := oc.mutation.Qunility1(); !ok {
		return &ValidationError{Name: "qunility1", err: errors.New(`ent: missing required field "Opinions.qunility1"`)}
	}
	if _, ok := oc.mutation.Qunility2(); !ok {
		return &ValidationError{Name: "qunility2", err: errors.New(`ent: missing required field "Opinions.qunility2"`)}
	}
	if _, ok := oc.mutation.Qunility3(); !ok {
		return &ValidationError{Name: "qunility3", err: errors.New(`ent: missing required field "Opinions.qunility3"`)}
	}
	if _, ok := oc.mutation.Value1(); !ok {
		return &ValidationError{Name: "value1", err: errors.New(`ent: missing required field "Opinions.value1"`)}
	}
	if _, ok := oc.mutation.Value2(); !ok {
		return &ValidationError{Name: "value2", err: errors.New(`ent: missing required field "Opinions.value2"`)}
	}
	if _, ok := oc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Opinions.comment"`)}
	}
	if _, ok := oc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Opinions.rating"`)}
	}
	if _, ok := oc.mutation.Createdat(); !ok {
		return &ValidationError{Name: "createdat", err: errors.New(`ent: missing required field "Opinions.createdat"`)}
	}
	return nil
}

func (oc *OpinionsCreate) sqlSave(ctx context.Context) (*Opinions, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Opinions.ID type: %T", _spec.ID.Value)
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OpinionsCreate) createSpec() (*Opinions, *sqlgraph.CreateSpec) {
	var (
		_node = &Opinions{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(opinions.Table, sqlgraph.NewFieldSpec(opinions.FieldID, field.TypeString))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(opinions.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.Telephone(); ok {
		_spec.SetField(opinions.FieldTelephone, field.TypeString, value)
		_node.Telephone = value
	}
	if value, ok := oc.mutation.Time(); ok {
		_spec.SetField(opinions.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := oc.mutation.Brand(); ok {
		_spec.SetField(opinions.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := oc.mutation.Resturtant(); ok {
		_spec.SetField(opinions.FieldResturtant, field.TypeString, value)
		_node.Resturtant = value
	}
	if value, ok := oc.mutation.Outlook1(); ok {
		_spec.SetField(opinions.FieldOutlook1, field.TypeString, value)
		_node.Outlook1 = value
	}
	if value, ok := oc.mutation.Outlook2(); ok {
		_spec.SetField(opinions.FieldOutlook2, field.TypeString, value)
		_node.Outlook2 = value
	}
	if value, ok := oc.mutation.Outlook3(); ok {
		_spec.SetField(opinions.FieldOutlook3, field.TypeString, value)
		_node.Outlook3 = value
	}
	if value, ok := oc.mutation.Waiting1(); ok {
		_spec.SetField(opinions.FieldWaiting1, field.TypeString, value)
		_node.Waiting1 = value
	}
	if value, ok := oc.mutation.Waiting2(); ok {
		_spec.SetField(opinions.FieldWaiting2, field.TypeString, value)
		_node.Waiting2 = value
	}
	if value, ok := oc.mutation.Ordering1(); ok {
		_spec.SetField(opinions.FieldOrdering1, field.TypeString, value)
		_node.Ordering1 = value
	}
	if value, ok := oc.mutation.Ordering2(); ok {
		_spec.SetField(opinions.FieldOrdering2, field.TypeString, value)
		_node.Ordering2 = value
	}
	if value, ok := oc.mutation.Ordering3(); ok {
		_spec.SetField(opinions.FieldOrdering3, field.TypeString, value)
		_node.Ordering3 = value
	}
	if value, ok := oc.mutation.Service1(); ok {
		_spec.SetField(opinions.FieldService1, field.TypeString, value)
		_node.Service1 = value
	}
	if value, ok := oc.mutation.Service2(); ok {
		_spec.SetField(opinions.FieldService2, field.TypeString, value)
		_node.Service2 = value
	}
	if value, ok := oc.mutation.Service3(); ok {
		_spec.SetField(opinions.FieldService3, field.TypeString, value)
		_node.Service3 = value
	}
	if value, ok := oc.mutation.Qunility1(); ok {
		_spec.SetField(opinions.FieldQunility1, field.TypeString, value)
		_node.Qunility1 = value
	}
	if value, ok := oc.mutation.Qunility2(); ok {
		_spec.SetField(opinions.FieldQunility2, field.TypeString, value)
		_node.Qunility2 = value
	}
	if value, ok := oc.mutation.Qunility3(); ok {
		_spec.SetField(opinions.FieldQunility3, field.TypeString, value)
		_node.Qunility3 = value
	}
	if value, ok := oc.mutation.Value1(); ok {
		_spec.SetField(opinions.FieldValue1, field.TypeString, value)
		_node.Value1 = value
	}
	if value, ok := oc.mutation.Value2(); ok {
		_spec.SetField(opinions.FieldValue2, field.TypeString, value)
		_node.Value2 = value
	}
	if value, ok := oc.mutation.Comment(); ok {
		_spec.SetField(opinions.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := oc.mutation.Rating(); ok {
		_spec.SetField(opinions.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := oc.mutation.Createdat(); ok {
		_spec.SetField(opinions.FieldCreatedat, field.TypeTime, value)
		_node.Createdat = value
	}
	return _node, _spec
}

// OpinionsCreateBulk is the builder for creating many Opinions entities in bulk.
type OpinionsCreateBulk struct {
	config
	builders []*OpinionsCreate
}

// Save creates the Opinions entities in the database.
func (ocb *OpinionsCreateBulk) Save(ctx context.Context) ([]*Opinions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Opinions, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OpinionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OpinionsCreateBulk) SaveX(ctx context.Context) []*Opinions {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OpinionsCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OpinionsCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
