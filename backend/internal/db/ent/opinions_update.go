// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"erm/internal/db/ent/opinions"
	"erm/internal/db/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OpinionsUpdate is the builder for updating Opinions entities.
type OpinionsUpdate struct {
	config
	hooks    []Hook
	mutation *OpinionsMutation
}

// Where appends a list predicates to the OpinionsUpdate builder.
func (ou *OpinionsUpdate) Where(ps ...predicate.Opinions) *OpinionsUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OpinionsUpdate) SetName(s string) *OpinionsUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetTelephone sets the "telephone" field.
func (ou *OpinionsUpdate) SetTelephone(s string) *OpinionsUpdate {
	ou.mutation.SetTelephone(s)
	return ou
}

// SetTime sets the "time" field.
func (ou *OpinionsUpdate) SetTime(t time.Time) *OpinionsUpdate {
	ou.mutation.SetTime(t)
	return ou
}

// SetBrand sets the "brand" field.
func (ou *OpinionsUpdate) SetBrand(s string) *OpinionsUpdate {
	ou.mutation.SetBrand(s)
	return ou
}

// SetResturtant sets the "resturtant" field.
func (ou *OpinionsUpdate) SetResturtant(s string) *OpinionsUpdate {
	ou.mutation.SetResturtant(s)
	return ou
}

// SetOutlook1 sets the "outlook1" field.
func (ou *OpinionsUpdate) SetOutlook1(s string) *OpinionsUpdate {
	ou.mutation.SetOutlook1(s)
	return ou
}

// SetOutlook2 sets the "outlook2" field.
func (ou *OpinionsUpdate) SetOutlook2(s string) *OpinionsUpdate {
	ou.mutation.SetOutlook2(s)
	return ou
}

// SetOutlook3 sets the "outlook3" field.
func (ou *OpinionsUpdate) SetOutlook3(s string) *OpinionsUpdate {
	ou.mutation.SetOutlook3(s)
	return ou
}

// SetWaiting1 sets the "waiting1" field.
func (ou *OpinionsUpdate) SetWaiting1(s string) *OpinionsUpdate {
	ou.mutation.SetWaiting1(s)
	return ou
}

// SetWaiting2 sets the "waiting2" field.
func (ou *OpinionsUpdate) SetWaiting2(s string) *OpinionsUpdate {
	ou.mutation.SetWaiting2(s)
	return ou
}

// SetOrdering1 sets the "ordering1" field.
func (ou *OpinionsUpdate) SetOrdering1(s string) *OpinionsUpdate {
	ou.mutation.SetOrdering1(s)
	return ou
}

// SetOrdering2 sets the "ordering2" field.
func (ou *OpinionsUpdate) SetOrdering2(s string) *OpinionsUpdate {
	ou.mutation.SetOrdering2(s)
	return ou
}

// SetOrdering3 sets the "ordering3" field.
func (ou *OpinionsUpdate) SetOrdering3(s string) *OpinionsUpdate {
	ou.mutation.SetOrdering3(s)
	return ou
}

// SetService1 sets the "service1" field.
func (ou *OpinionsUpdate) SetService1(s string) *OpinionsUpdate {
	ou.mutation.SetService1(s)
	return ou
}

// SetService2 sets the "service2" field.
func (ou *OpinionsUpdate) SetService2(s string) *OpinionsUpdate {
	ou.mutation.SetService2(s)
	return ou
}

// SetService3 sets the "service3" field.
func (ou *OpinionsUpdate) SetService3(s string) *OpinionsUpdate {
	ou.mutation.SetService3(s)
	return ou
}

// SetQunility1 sets the "qunility1" field.
func (ou *OpinionsUpdate) SetQunility1(s string) *OpinionsUpdate {
	ou.mutation.SetQunility1(s)
	return ou
}

// SetQunility2 sets the "qunility2" field.
func (ou *OpinionsUpdate) SetQunility2(s string) *OpinionsUpdate {
	ou.mutation.SetQunility2(s)
	return ou
}

// SetQunility3 sets the "qunility3" field.
func (ou *OpinionsUpdate) SetQunility3(s string) *OpinionsUpdate {
	ou.mutation.SetQunility3(s)
	return ou
}

// SetValue1 sets the "value1" field.
func (ou *OpinionsUpdate) SetValue1(s string) *OpinionsUpdate {
	ou.mutation.SetValue1(s)
	return ou
}

// SetValue2 sets the "value2" field.
func (ou *OpinionsUpdate) SetValue2(s string) *OpinionsUpdate {
	ou.mutation.SetValue2(s)
	return ou
}

// SetComment sets the "comment" field.
func (ou *OpinionsUpdate) SetComment(s string) *OpinionsUpdate {
	ou.mutation.SetComment(s)
	return ou
}

// SetRating sets the "rating" field.
func (ou *OpinionsUpdate) SetRating(i int) *OpinionsUpdate {
	ou.mutation.ResetRating()
	ou.mutation.SetRating(i)
	return ou
}

// AddRating adds i to the "rating" field.
func (ou *OpinionsUpdate) AddRating(i int) *OpinionsUpdate {
	ou.mutation.AddRating(i)
	return ou
}

// SetCreatedat sets the "createdat" field.
func (ou *OpinionsUpdate) SetCreatedat(t time.Time) *OpinionsUpdate {
	ou.mutation.SetCreatedat(t)
	return ou
}

// Mutation returns the OpinionsMutation object of the builder.
func (ou *OpinionsUpdate) Mutation() *OpinionsMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OpinionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OpinionsUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OpinionsUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OpinionsUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OpinionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(opinions.Table, opinions.Columns, sqlgraph.NewFieldSpec(opinions.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(opinions.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Telephone(); ok {
		_spec.SetField(opinions.FieldTelephone, field.TypeString, value)
	}
	if value, ok := ou.mutation.Time(); ok {
		_spec.SetField(opinions.FieldTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Brand(); ok {
		_spec.SetField(opinions.FieldBrand, field.TypeString, value)
	}
	if value, ok := ou.mutation.Resturtant(); ok {
		_spec.SetField(opinions.FieldResturtant, field.TypeString, value)
	}
	if value, ok := ou.mutation.Outlook1(); ok {
		_spec.SetField(opinions.FieldOutlook1, field.TypeString, value)
	}
	if value, ok := ou.mutation.Outlook2(); ok {
		_spec.SetField(opinions.FieldOutlook2, field.TypeString, value)
	}
	if value, ok := ou.mutation.Outlook3(); ok {
		_spec.SetField(opinions.FieldOutlook3, field.TypeString, value)
	}
	if value, ok := ou.mutation.Waiting1(); ok {
		_spec.SetField(opinions.FieldWaiting1, field.TypeString, value)
	}
	if value, ok := ou.mutation.Waiting2(); ok {
		_spec.SetField(opinions.FieldWaiting2, field.TypeString, value)
	}
	if value, ok := ou.mutation.Ordering1(); ok {
		_spec.SetField(opinions.FieldOrdering1, field.TypeString, value)
	}
	if value, ok := ou.mutation.Ordering2(); ok {
		_spec.SetField(opinions.FieldOrdering2, field.TypeString, value)
	}
	if value, ok := ou.mutation.Ordering3(); ok {
		_spec.SetField(opinions.FieldOrdering3, field.TypeString, value)
	}
	if value, ok := ou.mutation.Service1(); ok {
		_spec.SetField(opinions.FieldService1, field.TypeString, value)
	}
	if value, ok := ou.mutation.Service2(); ok {
		_spec.SetField(opinions.FieldService2, field.TypeString, value)
	}
	if value, ok := ou.mutation.Service3(); ok {
		_spec.SetField(opinions.FieldService3, field.TypeString, value)
	}
	if value, ok := ou.mutation.Qunility1(); ok {
		_spec.SetField(opinions.FieldQunility1, field.TypeString, value)
	}
	if value, ok := ou.mutation.Qunility2(); ok {
		_spec.SetField(opinions.FieldQunility2, field.TypeString, value)
	}
	if value, ok := ou.mutation.Qunility3(); ok {
		_spec.SetField(opinions.FieldQunility3, field.TypeString, value)
	}
	if value, ok := ou.mutation.Value1(); ok {
		_spec.SetField(opinions.FieldValue1, field.TypeString, value)
	}
	if value, ok := ou.mutation.Value2(); ok {
		_spec.SetField(opinions.FieldValue2, field.TypeString, value)
	}
	if value, ok := ou.mutation.Comment(); ok {
		_spec.SetField(opinions.FieldComment, field.TypeString, value)
	}
	if value, ok := ou.mutation.Rating(); ok {
		_spec.SetField(opinions.FieldRating, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedRating(); ok {
		_spec.AddField(opinions.FieldRating, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Createdat(); ok {
		_spec.SetField(opinions.FieldCreatedat, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opinions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OpinionsUpdateOne is the builder for updating a single Opinions entity.
type OpinionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OpinionsMutation
}

// SetName sets the "name" field.
func (ouo *OpinionsUpdateOne) SetName(s string) *OpinionsUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetTelephone sets the "telephone" field.
func (ouo *OpinionsUpdateOne) SetTelephone(s string) *OpinionsUpdateOne {
	ouo.mutation.SetTelephone(s)
	return ouo
}

// SetTime sets the "time" field.
func (ouo *OpinionsUpdateOne) SetTime(t time.Time) *OpinionsUpdateOne {
	ouo.mutation.SetTime(t)
	return ouo
}

// SetBrand sets the "brand" field.
func (ouo *OpinionsUpdateOne) SetBrand(s string) *OpinionsUpdateOne {
	ouo.mutation.SetBrand(s)
	return ouo
}

// SetResturtant sets the "resturtant" field.
func (ouo *OpinionsUpdateOne) SetResturtant(s string) *OpinionsUpdateOne {
	ouo.mutation.SetResturtant(s)
	return ouo
}

// SetOutlook1 sets the "outlook1" field.
func (ouo *OpinionsUpdateOne) SetOutlook1(s string) *OpinionsUpdateOne {
	ouo.mutation.SetOutlook1(s)
	return ouo
}

// SetOutlook2 sets the "outlook2" field.
func (ouo *OpinionsUpdateOne) SetOutlook2(s string) *OpinionsUpdateOne {
	ouo.mutation.SetOutlook2(s)
	return ouo
}

// SetOutlook3 sets the "outlook3" field.
func (ouo *OpinionsUpdateOne) SetOutlook3(s string) *OpinionsUpdateOne {
	ouo.mutation.SetOutlook3(s)
	return ouo
}

// SetWaiting1 sets the "waiting1" field.
func (ouo *OpinionsUpdateOne) SetWaiting1(s string) *OpinionsUpdateOne {
	ouo.mutation.SetWaiting1(s)
	return ouo
}

// SetWaiting2 sets the "waiting2" field.
func (ouo *OpinionsUpdateOne) SetWaiting2(s string) *OpinionsUpdateOne {
	ouo.mutation.SetWaiting2(s)
	return ouo
}

// SetOrdering1 sets the "ordering1" field.
func (ouo *OpinionsUpdateOne) SetOrdering1(s string) *OpinionsUpdateOne {
	ouo.mutation.SetOrdering1(s)
	return ouo
}

// SetOrdering2 sets the "ordering2" field.
func (ouo *OpinionsUpdateOne) SetOrdering2(s string) *OpinionsUpdateOne {
	ouo.mutation.SetOrdering2(s)
	return ouo
}

// SetOrdering3 sets the "ordering3" field.
func (ouo *OpinionsUpdateOne) SetOrdering3(s string) *OpinionsUpdateOne {
	ouo.mutation.SetOrdering3(s)
	return ouo
}

// SetService1 sets the "service1" field.
func (ouo *OpinionsUpdateOne) SetService1(s string) *OpinionsUpdateOne {
	ouo.mutation.SetService1(s)
	return ouo
}

// SetService2 sets the "service2" field.
func (ouo *OpinionsUpdateOne) SetService2(s string) *OpinionsUpdateOne {
	ouo.mutation.SetService2(s)
	return ouo
}

// SetService3 sets the "service3" field.
func (ouo *OpinionsUpdateOne) SetService3(s string) *OpinionsUpdateOne {
	ouo.mutation.SetService3(s)
	return ouo
}

// SetQunility1 sets the "qunility1" field.
func (ouo *OpinionsUpdateOne) SetQunility1(s string) *OpinionsUpdateOne {
	ouo.mutation.SetQunility1(s)
	return ouo
}

// SetQunility2 sets the "qunility2" field.
func (ouo *OpinionsUpdateOne) SetQunility2(s string) *OpinionsUpdateOne {
	ouo.mutation.SetQunility2(s)
	return ouo
}

// SetQunility3 sets the "qunility3" field.
func (ouo *OpinionsUpdateOne) SetQunility3(s string) *OpinionsUpdateOne {
	ouo.mutation.SetQunility3(s)
	return ouo
}

// SetValue1 sets the "value1" field.
func (ouo *OpinionsUpdateOne) SetValue1(s string) *OpinionsUpdateOne {
	ouo.mutation.SetValue1(s)
	return ouo
}

// SetValue2 sets the "value2" field.
func (ouo *OpinionsUpdateOne) SetValue2(s string) *OpinionsUpdateOne {
	ouo.mutation.SetValue2(s)
	return ouo
}

// SetComment sets the "comment" field.
func (ouo *OpinionsUpdateOne) SetComment(s string) *OpinionsUpdateOne {
	ouo.mutation.SetComment(s)
	return ouo
}

// SetRating sets the "rating" field.
func (ouo *OpinionsUpdateOne) SetRating(i int) *OpinionsUpdateOne {
	ouo.mutation.ResetRating()
	ouo.mutation.SetRating(i)
	return ouo
}

// AddRating adds i to the "rating" field.
func (ouo *OpinionsUpdateOne) AddRating(i int) *OpinionsUpdateOne {
	ouo.mutation.AddRating(i)
	return ouo
}

// SetCreatedat sets the "createdat" field.
func (ouo *OpinionsUpdateOne) SetCreatedat(t time.Time) *OpinionsUpdateOne {
	ouo.mutation.SetCreatedat(t)
	return ouo
}

// Mutation returns the OpinionsMutation object of the builder.
func (ouo *OpinionsUpdateOne) Mutation() *OpinionsMutation {
	return ouo.mutation
}

// Where appends a list predicates to the OpinionsUpdate builder.
func (ouo *OpinionsUpdateOne) Where(ps ...predicate.Opinions) *OpinionsUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OpinionsUpdateOne) Select(field string, fields ...string) *OpinionsUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Opinions entity.
func (ouo *OpinionsUpdateOne) Save(ctx context.Context) (*Opinions, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OpinionsUpdateOne) SaveX(ctx context.Context) *Opinions {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OpinionsUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OpinionsUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OpinionsUpdateOne) sqlSave(ctx context.Context) (_node *Opinions, err error) {
	_spec := sqlgraph.NewUpdateSpec(opinions.Table, opinions.Columns, sqlgraph.NewFieldSpec(opinions.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Opinions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, opinions.FieldID)
		for _, f := range fields {
			if !opinions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != opinions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(opinions.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Telephone(); ok {
		_spec.SetField(opinions.FieldTelephone, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Time(); ok {
		_spec.SetField(opinions.FieldTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Brand(); ok {
		_spec.SetField(opinions.FieldBrand, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Resturtant(); ok {
		_spec.SetField(opinions.FieldResturtant, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Outlook1(); ok {
		_spec.SetField(opinions.FieldOutlook1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Outlook2(); ok {
		_spec.SetField(opinions.FieldOutlook2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Outlook3(); ok {
		_spec.SetField(opinions.FieldOutlook3, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Waiting1(); ok {
		_spec.SetField(opinions.FieldWaiting1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Waiting2(); ok {
		_spec.SetField(opinions.FieldWaiting2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Ordering1(); ok {
		_spec.SetField(opinions.FieldOrdering1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Ordering2(); ok {
		_spec.SetField(opinions.FieldOrdering2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Ordering3(); ok {
		_spec.SetField(opinions.FieldOrdering3, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Service1(); ok {
		_spec.SetField(opinions.FieldService1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Service2(); ok {
		_spec.SetField(opinions.FieldService2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Service3(); ok {
		_spec.SetField(opinions.FieldService3, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Qunility1(); ok {
		_spec.SetField(opinions.FieldQunility1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Qunility2(); ok {
		_spec.SetField(opinions.FieldQunility2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Qunility3(); ok {
		_spec.SetField(opinions.FieldQunility3, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Value1(); ok {
		_spec.SetField(opinions.FieldValue1, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Value2(); ok {
		_spec.SetField(opinions.FieldValue2, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Comment(); ok {
		_spec.SetField(opinions.FieldComment, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Rating(); ok {
		_spec.SetField(opinions.FieldRating, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedRating(); ok {
		_spec.AddField(opinions.FieldRating, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Createdat(); ok {
		_spec.SetField(opinions.FieldCreatedat, field.TypeTime, value)
	}
	_node = &Opinions{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{opinions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
