// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"erm/internal/db/ent/migrate"

	"erm/internal/db/ent/medias"
	"erm/internal/db/ent/opinions"
	"erm/internal/db/ent/userlogins"
	"erm/internal/db/ent/users"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Medias is the client for interacting with the Medias builders.
	Medias *MediasClient
	// Opinions is the client for interacting with the Opinions builders.
	Opinions *OpinionsClient
	// Userlogins is the client for interacting with the Userlogins builders.
	Userlogins *UserloginsClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Medias = NewMediasClient(c.config)
	c.Opinions = NewOpinionsClient(c.config)
	c.Userlogins = NewUserloginsClient(c.config)
	c.Users = NewUsersClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Medias:     NewMediasClient(cfg),
		Opinions:   NewOpinionsClient(cfg),
		Userlogins: NewUserloginsClient(cfg),
		Users:      NewUsersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Medias:     NewMediasClient(cfg),
		Opinions:   NewOpinionsClient(cfg),
		Userlogins: NewUserloginsClient(cfg),
		Users:      NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Medias.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Medias.Use(hooks...)
	c.Opinions.Use(hooks...)
	c.Userlogins.Use(hooks...)
	c.Users.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Medias.Intercept(interceptors...)
	c.Opinions.Intercept(interceptors...)
	c.Userlogins.Intercept(interceptors...)
	c.Users.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MediasMutation:
		return c.Medias.mutate(ctx, m)
	case *OpinionsMutation:
		return c.Opinions.mutate(ctx, m)
	case *UserloginsMutation:
		return c.Userlogins.mutate(ctx, m)
	case *UsersMutation:
		return c.Users.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MediasClient is a client for the Medias schema.
type MediasClient struct {
	config
}

// NewMediasClient returns a client for the Medias from the given config.
func NewMediasClient(c config) *MediasClient {
	return &MediasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medias.Hooks(f(g(h())))`.
func (c *MediasClient) Use(hooks ...Hook) {
	c.hooks.Medias = append(c.hooks.Medias, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `medias.Intercept(f(g(h())))`.
func (c *MediasClient) Intercept(interceptors ...Interceptor) {
	c.inters.Medias = append(c.inters.Medias, interceptors...)
}

// Create returns a builder for creating a Medias entity.
func (c *MediasClient) Create() *MediasCreate {
	mutation := newMediasMutation(c.config, OpCreate)
	return &MediasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Medias entities.
func (c *MediasClient) CreateBulk(builders ...*MediasCreate) *MediasCreateBulk {
	return &MediasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Medias.
func (c *MediasClient) Update() *MediasUpdate {
	mutation := newMediasMutation(c.config, OpUpdate)
	return &MediasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MediasClient) UpdateOne(m *Medias) *MediasUpdateOne {
	mutation := newMediasMutation(c.config, OpUpdateOne, withMedias(m))
	return &MediasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MediasClient) UpdateOneID(id int) *MediasUpdateOne {
	mutation := newMediasMutation(c.config, OpUpdateOne, withMediasID(id))
	return &MediasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medias.
func (c *MediasClient) Delete() *MediasDelete {
	mutation := newMediasMutation(c.config, OpDelete)
	return &MediasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MediasClient) DeleteOne(m *Medias) *MediasDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MediasClient) DeleteOneID(id int) *MediasDeleteOne {
	builder := c.Delete().Where(medias.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MediasDeleteOne{builder}
}

// Query returns a query builder for Medias.
func (c *MediasClient) Query() *MediasQuery {
	return &MediasQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedias},
		inters: c.Interceptors(),
	}
}

// Get returns a Medias entity by its id.
func (c *MediasClient) Get(ctx context.Context, id int) (*Medias, error) {
	return c.Query().Where(medias.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MediasClient) GetX(ctx context.Context, id int) *Medias {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MediasClient) Hooks() []Hook {
	return c.hooks.Medias
}

// Interceptors returns the client interceptors.
func (c *MediasClient) Interceptors() []Interceptor {
	return c.inters.Medias
}

func (c *MediasClient) mutate(ctx context.Context, m *MediasMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MediasCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MediasUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MediasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MediasDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Medias mutation op: %q", m.Op())
	}
}

// OpinionsClient is a client for the Opinions schema.
type OpinionsClient struct {
	config
}

// NewOpinionsClient returns a client for the Opinions from the given config.
func NewOpinionsClient(c config) *OpinionsClient {
	return &OpinionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `opinions.Hooks(f(g(h())))`.
func (c *OpinionsClient) Use(hooks ...Hook) {
	c.hooks.Opinions = append(c.hooks.Opinions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `opinions.Intercept(f(g(h())))`.
func (c *OpinionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Opinions = append(c.inters.Opinions, interceptors...)
}

// Create returns a builder for creating a Opinions entity.
func (c *OpinionsClient) Create() *OpinionsCreate {
	mutation := newOpinionsMutation(c.config, OpCreate)
	return &OpinionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Opinions entities.
func (c *OpinionsClient) CreateBulk(builders ...*OpinionsCreate) *OpinionsCreateBulk {
	return &OpinionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Opinions.
func (c *OpinionsClient) Update() *OpinionsUpdate {
	mutation := newOpinionsMutation(c.config, OpUpdate)
	return &OpinionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OpinionsClient) UpdateOne(o *Opinions) *OpinionsUpdateOne {
	mutation := newOpinionsMutation(c.config, OpUpdateOne, withOpinions(o))
	return &OpinionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OpinionsClient) UpdateOneID(id string) *OpinionsUpdateOne {
	mutation := newOpinionsMutation(c.config, OpUpdateOne, withOpinionsID(id))
	return &OpinionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Opinions.
func (c *OpinionsClient) Delete() *OpinionsDelete {
	mutation := newOpinionsMutation(c.config, OpDelete)
	return &OpinionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OpinionsClient) DeleteOne(o *Opinions) *OpinionsDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OpinionsClient) DeleteOneID(id string) *OpinionsDeleteOne {
	builder := c.Delete().Where(opinions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OpinionsDeleteOne{builder}
}

// Query returns a query builder for Opinions.
func (c *OpinionsClient) Query() *OpinionsQuery {
	return &OpinionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOpinions},
		inters: c.Interceptors(),
	}
}

// Get returns a Opinions entity by its id.
func (c *OpinionsClient) Get(ctx context.Context, id string) (*Opinions, error) {
	return c.Query().Where(opinions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OpinionsClient) GetX(ctx context.Context, id string) *Opinions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OpinionsClient) Hooks() []Hook {
	return c.hooks.Opinions
}

// Interceptors returns the client interceptors.
func (c *OpinionsClient) Interceptors() []Interceptor {
	return c.inters.Opinions
}

func (c *OpinionsClient) mutate(ctx context.Context, m *OpinionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OpinionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OpinionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OpinionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OpinionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Opinions mutation op: %q", m.Op())
	}
}

// UserloginsClient is a client for the Userlogins schema.
type UserloginsClient struct {
	config
}

// NewUserloginsClient returns a client for the Userlogins from the given config.
func NewUserloginsClient(c config) *UserloginsClient {
	return &UserloginsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlogins.Hooks(f(g(h())))`.
func (c *UserloginsClient) Use(hooks ...Hook) {
	c.hooks.Userlogins = append(c.hooks.Userlogins, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userlogins.Intercept(f(g(h())))`.
func (c *UserloginsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Userlogins = append(c.inters.Userlogins, interceptors...)
}

// Create returns a builder for creating a Userlogins entity.
func (c *UserloginsClient) Create() *UserloginsCreate {
	mutation := newUserloginsMutation(c.config, OpCreate)
	return &UserloginsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Userlogins entities.
func (c *UserloginsClient) CreateBulk(builders ...*UserloginsCreate) *UserloginsCreateBulk {
	return &UserloginsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Userlogins.
func (c *UserloginsClient) Update() *UserloginsUpdate {
	mutation := newUserloginsMutation(c.config, OpUpdate)
	return &UserloginsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserloginsClient) UpdateOne(u *Userlogins) *UserloginsUpdateOne {
	mutation := newUserloginsMutation(c.config, OpUpdateOne, withUserlogins(u))
	return &UserloginsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserloginsClient) UpdateOneID(id int) *UserloginsUpdateOne {
	mutation := newUserloginsMutation(c.config, OpUpdateOne, withUserloginsID(id))
	return &UserloginsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Userlogins.
func (c *UserloginsClient) Delete() *UserloginsDelete {
	mutation := newUserloginsMutation(c.config, OpDelete)
	return &UserloginsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserloginsClient) DeleteOne(u *Userlogins) *UserloginsDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserloginsClient) DeleteOneID(id int) *UserloginsDeleteOne {
	builder := c.Delete().Where(userlogins.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserloginsDeleteOne{builder}
}

// Query returns a query builder for Userlogins.
func (c *UserloginsClient) Query() *UserloginsQuery {
	return &UserloginsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserlogins},
		inters: c.Interceptors(),
	}
}

// Get returns a Userlogins entity by its id.
func (c *UserloginsClient) Get(ctx context.Context, id int) (*Userlogins, error) {
	return c.Query().Where(userlogins.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserloginsClient) GetX(ctx context.Context, id int) *Userlogins {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserloginsClient) Hooks() []Hook {
	return c.hooks.Userlogins
}

// Interceptors returns the client interceptors.
func (c *UserloginsClient) Interceptors() []Interceptor {
	return c.inters.Userlogins
}

func (c *UserloginsClient) mutate(ctx context.Context, m *UserloginsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserloginsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserloginsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserloginsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserloginsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Userlogins mutation op: %q", m.Op())
	}
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `users.Hooks(f(g(h())))`.
func (c *UsersClient) Use(hooks ...Hook) {
	c.hooks.Users = append(c.hooks.Users, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `users.Intercept(f(g(h())))`.
func (c *UsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Users = append(c.inters.Users, interceptors...)
}

// Create returns a builder for creating a Users entity.
func (c *UsersClient) Create() *UsersCreate {
	mutation := newUsersMutation(c.config, OpCreate)
	return &UsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Users entities.
func (c *UsersClient) CreateBulk(builders ...*UsersCreate) *UsersCreateBulk {
	return &UsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	mutation := newUsersMutation(c.config, OpUpdate)
	return &UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsers(u))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id uuid.UUID) *UsersUpdateOne {
	mutation := newUsersMutation(c.config, OpUpdateOne, withUsersID(id))
	return &UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	mutation := newUsersMutation(c.config, OpDelete)
	return &UsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersClient) DeleteOneID(id uuid.UUID) *UsersDeleteOne {
	builder := c.Delete().Where(users.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersDeleteOne{builder}
}

// Query returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id uuid.UUID) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id uuid.UUID) *Users {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsersClient) Hooks() []Hook {
	return c.hooks.Users
}

// Interceptors returns the client interceptors.
func (c *UsersClient) Interceptors() []Interceptor {
	return c.inters.Users
}

func (c *UsersClient) mutate(ctx context.Context, m *UsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Users mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Medias, Opinions, Userlogins, Users []ent.Hook
	}
	inters struct {
		Medias, Opinions, Userlogins, Users []ent.Interceptor
	}
)
